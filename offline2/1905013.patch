diff --git a/.vscode/c_cpp_properties.json b/.vscode/c_cpp_properties.json
new file mode 100644
index 0000000..c2098a2
--- /dev/null
+++ b/.vscode/c_cpp_properties.json
@@ -0,0 +1,18 @@
+{
+  "configurations": [
+    {
+      "name": "linux-gcc-x64",
+      "includePath": [
+        "${workspaceFolder}/**"
+      ],
+      "compilerPath": "/usr/bin/gcc",
+      "cStandard": "${default}",
+      "cppStandard": "${default}",
+      "intelliSenseMode": "linux-gcc-x64",
+      "compilerArgs": [
+        ""
+      ]
+    }
+  ],
+  "version": 4
+}
\ No newline at end of file
diff --git a/.vscode/launch.json b/.vscode/launch.json
new file mode 100644
index 0000000..a017e36
--- /dev/null
+++ b/.vscode/launch.json
@@ -0,0 +1,24 @@
+{
+  "version": "0.2.0",
+  "configurations": [
+    {
+      "name": "C/C++ Runner: Debug Session",
+      "type": "cppdbg",
+      "request": "launch",
+      "args": [],
+      "stopAtEntry": false,
+      "externalConsole": false,
+      "cwd": "/home/navid/L3T2/LAB/OS_SESSIONAL/xv6/xv6-riscv/user",
+      "program": "/home/navid/L3T2/LAB/OS_SESSIONAL/xv6/xv6-riscv/user/build/Debug/outDebug",
+      "MIMode": "gdb",
+      "miDebuggerPath": "gdb",
+      "setupCommands": [
+        {
+          "description": "Enable pretty-printing for gdb",
+          "text": "-enable-pretty-printing",
+          "ignoreFailures": true
+        }
+      ]
+    }
+  ]
+}
\ No newline at end of file
diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..bfd7745
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,37 @@
+{
+  "C_Cpp_Runner.cCompilerPath": "gcc",
+  "C_Cpp_Runner.cppCompilerPath": "g++",
+  "C_Cpp_Runner.debuggerPath": "gdb",
+  "C_Cpp_Runner.cStandard": "",
+  "C_Cpp_Runner.cppStandard": "",
+  "C_Cpp_Runner.msvcBatchPath": "",
+  "C_Cpp_Runner.useMsvc": false,
+  "C_Cpp_Runner.warnings": [
+    "-Wall",
+    "-Wextra",
+    "-Wpedantic",
+    "-Wshadow",
+    "-Wformat=2",
+    "-Wconversion",
+    "-Wnull-dereference",
+    "-Wsign-conversion"
+  ],
+  "C_Cpp_Runner.enableWarnings": true,
+  "C_Cpp_Runner.warningsAsError": false,
+  "C_Cpp_Runner.compilerArgs": [],
+  "C_Cpp_Runner.linkerArgs": [],
+  "C_Cpp_Runner.includePaths": [],
+  "C_Cpp_Runner.includeSearch": [
+    "*",
+    "**/*"
+  ],
+  "C_Cpp_Runner.excludeSearch": [
+    "**/build",
+    "**/build/**",
+    "**/.*",
+    "**/.*/**",
+    "**/.vscode",
+    "**/.vscode/**"
+  ],
+  "C_Cpp_Runner.useAddressSanitizer": false
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 39a99d7..4e7da1e 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,9 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_trace\
+	$U/_history\
+	$U/_exit2\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..b1e4591 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,7 +8,9 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct syscall_stat;
 
+void            exit_helper(void);
 // bio.c
 void            binit(void);
 struct buf*     bread(uint, uint);
@@ -106,6 +108,9 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             history(uint,int);
+
+
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/kernelvec.S b/kernel/kernelvec.S
index fb31b32..9a827a4 100644
--- a/kernel/kernelvec.S
+++ b/kernel/kernelvec.S
@@ -102,7 +102,10 @@ timervec:
         sd a1, 0(a0)
         sd a2, 8(a0)
         sd a3, 16(a0)
-
+# bonus-------------
+        ld a1,40(a0)
+        bne a1,zero,halt
+# --------------------------
         # schedule the next timer interrupt
         # by adding interval to mtimecmp.
         ld a1, 24(a0) # CLINT_MTIMECMP(hart)
@@ -122,3 +125,14 @@ timervec:
         csrrw a0, mscratch, a0
 
         mret
+        # bonus--------------------
+halt:
+        # based on qemu's hw/riscv/virt.c:
+        # qemu halts if FINISHER_PASS(=0x5555) is 
+        # written at address *VIRT_TEST(=0x100000L)
+        lui a1, 0x100
+        lui a2, 0x5
+        addi a2, a2, 0x555
+        sw a2, 0(a1)
+spin:
+        j spin
\ No newline at end of file
diff --git a/kernel/printf.c b/kernel/printf.c
index 1a50203..14bf70d 100644
--- a/kernel/printf.c
+++ b/kernel/printf.c
@@ -123,6 +123,7 @@ panic(char *s)
   printf(s);
   printf("\n");
   panicked = 1; // freeze uart output from other CPUs
+  exit_helper();
   for(;;)
     ;
 }
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..37629b1 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,9 +5,10 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "struct_stat.h"
 
 struct cpu cpus[NCPU];
-
+extern struct syscall_stat syscall_history[];
 struct proc proc[NPROC];
 
 struct proc *initproc;
@@ -124,6 +125,7 @@ allocproc(void)
 found:
   p->pid = allocpid();
   p->state = USED;
+  p->trace_num=-1;
 
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
@@ -250,6 +252,11 @@ userinit(void)
   p->cwd = namei("/");
 
   p->state = RUNNABLE;
+  //adding this to initialize the syscall_history array(proc.h)
+  // for (int i = 0; i < 23; i++) {
+  //   syscall_history[i].times_called = 0;
+  //   syscall_history[i].elapsed_time = 0;
+  // }
 
   release(&p->lock);
 }
@@ -681,3 +688,4 @@ procdump(void)
     printf("\n");
   }
 }
+
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..9c05db9 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -103,5 +103,8 @@ struct proc {
   struct context context;      // swtch() here to run process
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
-  char name[16];               // Process name (debugging)
+  char name[16];
+  int trace_num;               // Process name (debugging)
 };
+
+
diff --git a/kernel/start.c b/kernel/start.c
index e16f18a..fbb12ed 100644
--- a/kernel/start.c
+++ b/kernel/start.c
@@ -11,7 +11,7 @@ void timerinit();
 __attribute__ ((aligned (16))) char stack0[4096 * NCPU];
 
 // a scratch area per CPU for machine-mode timer interrupts.
-uint64 timer_scratch[NCPU][5];
+uint64 timer_scratch[NCPU][6];
 
 // assembly code in kernelvec.S for machine-mode timer interrupt.
 extern void timervec();
@@ -76,6 +76,7 @@ timerinit()
   uint64 *scratch = &timer_scratch[id][0];
   scratch[3] = CLINT_MTIMECMP(id);
   scratch[4] = interval;
+    scratch[5] = 0;
   w_mscratch((uint64)scratch);
 
   // set the machine-mode trap handler.
@@ -87,3 +88,9 @@ timerinit()
   // enable machine-mode timer interrupts.
   w_mie(r_mie() | MIE_MTIE);
 }
+void
+exit_helper()
+{
+  // set halt flag in scratch area for hartid[0] to 1.
+  timer_scratch[0][5] = 1;
+}
\ No newline at end of file
diff --git a/kernel/struct_stat.h b/kernel/struct_stat.h
new file mode 100644
index 0000000..db3415d
--- /dev/null
+++ b/kernel/struct_stat.h
@@ -0,0 +1,6 @@
+struct syscall_stat{
+char syscall_name[20];
+int times_called;
+int elapsed_time;
+};
+
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..ea39541 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -6,6 +6,10 @@
 #include "proc.h"
 #include "syscall.h"
 #include "defs.h"
+#include "struct_stat.h"
+
+
+
 
 // Fetch the uint64 at addr from the current process.
 int
@@ -78,7 +82,7 @@ argstr(int n, char *buf, int max)
   argaddr(n, &addr);
   return fetchstr(addr, buf, max);
 }
-
+int cheker=0;
 // Prototypes for the functions that handle system calls.
 extern uint64 sys_fork(void);
 extern uint64 sys_exit(void);
@@ -101,6 +105,10 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_trace(void);
+extern uint64 sys_history(void);
+//for bonus
+extern uint64 sys_exit2(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,22 +134,379 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
+[SYS_history] sys_history,
+[SYS_exit2]   sys_exit2,
+};
+
+//this map syscall names to their number
+const char* syscall_names[] = {
+    [SYS_fork]    = "fork",
+    [SYS_exit]    = "exit",
+    [SYS_wait]    = "wait",
+    [SYS_pipe]    = "pipe",
+    [SYS_read]    = "read",
+    [SYS_kill]    = "kill",
+    [SYS_exec]    = "exec",
+    [SYS_fstat]   = "fstat",
+    [SYS_chdir]   = "chdir",
+    [SYS_dup]     = "dup",
+    [SYS_getpid]  = "getpid",
+    [SYS_sbrk]    = "sbrk",
+    [SYS_sleep]   = "sleep",
+    [SYS_uptime]  = "uptime",
+    [SYS_open]    = "open",
+    [SYS_write]   = "write",
+    [SYS_mknod]   = "mknod",
+    [SYS_unlink]  = "unlink",
+    [SYS_link]    = "link",
+    [SYS_mkdir]   = "mkdir",
+    [SYS_close]   = "close",
+    [SYS_trace]   ="trace",
+    [SYS_history] ="history",
+    [SYS_exit2]   ="exit2",
 };
 
+//A struct array to hold the information about history system call
+struct syscall_stat syscall_history[] = {
+    [SYS_fork]    = {"fork", 0, 0},
+    [SYS_exit]    = {"exit", 0, 0},
+    [SYS_wait]    = {"wait", 0, 0},
+    [SYS_pipe]    = {"pipe", 0, 0},
+    [SYS_read]    = {"read", 0, 0},
+    [SYS_kill]    = {"kill", 0, 0},
+    [SYS_exec]    = {"exec", 0, 0},
+    [SYS_fstat]   = {"fstat", 0, 0},
+    [SYS_chdir]   = {"chdir", 0, 0},
+    [SYS_dup]     = {"dup", 0, 0},
+    [SYS_getpid]  = {"getpid", 0, 0},
+    [SYS_sbrk]    = {"sbrk", 0, 0},
+    [SYS_sleep]   = {"sleep", 0, 0},
+    [SYS_uptime]  = {"uptime", 0, 0},
+    [SYS_open]    = {"open", 0, 0},
+    [SYS_write]   = {"write", 0, 0},
+    [SYS_mknod]   = {"mknod", 0, 0},
+    [SYS_unlink]  = {"unlink", 0, 0},
+    [SYS_link]    = {"link", 0, 0},
+    [SYS_mkdir]   = {"mkdir", 0, 0},
+    [SYS_close]   = {"close", 0, 0},
+    [SYS_trace]  = {"trace",0,0},
+    [SYS_history] = {"history",0,0},
+    [SYS_exit2]   ={"exit2",0,0},
+};
+//this history function is called from sys_history from sysproc.c ,
+int history(uint addr,int syscall_num)
+{
+  struct proc *p = myproc();
+struct syscall_stat ptr;
+//takes the information about the system call is ptr
+ptr=syscall_history[syscall_num];
+//copies the information of ptr is addr from userspace
+  if(copyout(p->pagetable, addr, (char *)&ptr, sizeof(ptr)) < 0)
+      return -1;
+ return 1;   
+
+}
+
 void
 syscall(void)
 {
+  
   int num;
   struct proc *p = myproc();
 
   num = p->trapframe->a7;
+
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
-    p->trapframe->a0 = syscalls[num]();
+    if(num==p->trace_num){
+    printf("pid = %d,  syscall = %s ,  ",p->pid,syscall_names[num]);
+     //printf("sys call number %d\n",num);
+     int t;
+     
+     if(num==1)
+     {
+     
+      
+      printf("args = (");
+      printf(")");
+     }
+     if(num==2)
+     {
+      int l=-1;
+      argint(0,&l);
+      printf("args = (");
+      printf("%d",l);
+      printf(")");
+     }
+     if(num==3)
+     {
+      uint64 u=10;
+
+      uint64 *ptr2=&u;
+      argaddr(0,ptr2);
+      printf("args = (");
+      printf("%p",ptr2);
+      printf(")");
+     }
+     if(num==4)
+     {
+      uint64 u=10;
+      uint64 *ptr2=&u;
+      argaddr(0,ptr2);
+      printf("args = (");
+      printf("%p",ptr2);
+      printf(")");
+     }
+     if(num==5)
+     {
+      uint64 u=10;
+      //read
+      uint64 *ptr2=&u;
+      int o,p;
+      argint(0,&o);
+      argaddr(1,ptr2);
+      argint(2,&p);
+      printf("args = (");
+      printf("%d, ",o);
+      printf("%p, ",ptr2);
+      printf("%d",p);
+      printf(")");
+     }
+     if(num==6)
+     {
+      //kill
+      int o;
+      argint(0,&o);
+      printf("args = (");
+      printf("%d",o);
+      printf(")");
+     }
+     if(num==7)
+     {
+      //exec
+      char name[100];
+      char* str=name;
+      argstr(0,str,sizeof(name));
+      // char *argv[10];
+      // char **argv2=argv;
+      uint64 argv2=10;
+      uint64 *ptr2=&argv2;
+      argaddr(1,ptr2);
+      printf("args = (");
+      printf("%s, ",name);
+      printf("%p",ptr2);
+      printf(")");
+     }
+     if(num==8)
+     {
+      //fstat
+      int o;
+      uint64 q=10;
+      uint64 *ptr2=&q;
+      argint(0,&o);
+      argaddr(1,ptr2);
+      printf("args = (");
+      printf("%d, ",o);
+      printf("%p",ptr2);
+      printf(")");
+     }
+     if(num==9)
+     {
+      //chdir
+      char name[100];
+      char* str=name;
+      argstr(0,str,sizeof(name));
+      printf("args = (");
+      printf("%s",name);
+      printf(")");
+     }
+     if(num==10)
+     {
+      //dup
+      int o;
+      int o2;
+      argint(0,&o);
+      argint(1,&o2);
+      printf("args = (");
+      printf("%d, ",o);
+      printf("%d",o2);
+      printf(")");
+     }
+      if(num==11)
+      {
+        //getpid
+        printf("args = (");
+        printf(")");
+      }
+      if(num==12)
+      {
+        //sbrk
+        int o;
+        argint(0,&o);
+        printf("args = (");
+        printf("%d",o);
+        printf(")");
+      }
+      if(num==13)
+      {
+        //sleep
+        int o;
+        argint(0,&o);
+        printf("args = (");
+        printf("%d",o);
+        printf(")");
+      }
+      if(num==14)
+      {
+        //uptime
+        printf("args = (");
+        printf(")");
+      }
+     if(num==15)
+     {
+      char name[100];
+      char* str=name;
+      int p=10;
+      memset(name, 0, sizeof(name)); // clear buffer
+      argstr(0,str,sizeof(name));
+      argint(1,&p);
+      printf("args = (");
+      printf("%s, ",name);
+      printf("%d",p);
+      printf("), ");
+     }
+     if(num==16)
+     {
+      //write
+      int o;
+      uint64 y=10;
+      uint64 *ptr2=&y;
+      int t;
+      argint(0,&o);
+      argaddr(1,ptr2);
+      argint(2,&t);
+      printf("args = (");
+      printf("%d, ",o);
+      printf("%p, ",ptr2);
+      printf("%d",t);
+      printf(")");
+     }
+     if(num==17)
+     {
+      //mknod
+      char name[100];
+      char* str=name;
+      argstr(0,str,sizeof(name));
+      int o;
+      argint(1,&o);
+      argint(2,&t);
+      printf("args = (");
+      printf("%s, ",name);
+      printf("%d, ",o);
+      printf("%d",t);
+      printf(")");
+     }
+     if(num==18)
+     {
+      //unlink
+      char name[100];
+      char* str=name;
+      argstr(0,str,sizeof(name));
+      printf("args = (");
+      printf("%s",name);
+      printf(")");
+     }
+      if(num==19)
+      {
+        //link
+        char name[100];
+        char* str=name;
+        char name2[100];
+        char* str2=name2;
+        argstr(0,str,sizeof(name));
+        argstr(1,str2,sizeof(name2));
+        printf("args = (");
+        printf("%s, ",name);
+        printf("%s",name2);
+        printf(")");
+      }
+     if(num==20)
+     {
+      char name[100];
+      char* str=name;
+      argstr(0,str,100);
+      printf("args = (");
+      printf("%s",name);
+      printf(")");
+     }
+      if(num==21)
+      {
+        //close
+        int o;
+        argint(0,&o);
+        printf("args = (");
+        printf("%d",o);
+        printf(")");
+      }
+      if(num==22)
+      {
+        //trace
+        int o;
+        argint(0,&o);
+        printf("args = (");
+        printf("%d",o);
+        printf(")");
+      }
+      if(num==23){
+          int o;
+      uint64 q=10;
+      uint64 *ptr2=&q;
+      argint(0,&o);
+      argaddr(1,ptr2);
+      printf("args = (");
+      printf("%d, ",o);
+      printf("%p",ptr2);
+      printf(")");
+
+      }
+      if(num==24)
+      {
+        printf("args = (");
+      printf(")");
+
+      }
+       p->trapframe->a0 = syscalls[num]();
+    printf("  return: %d \n",p->trapframe->a0);
+    }
+    else
+    {
+      uint start_time=0,finish_time=0;
+      acquire(&tickslock);
+      start_time=ticks;
+      release(&tickslock);
+      p->trapframe->a0 = syscalls[num]();
+      acquire(&tickslock);
+      finish_time=ticks;
+      //there is an array syscall_history defined in proc.h for keeping the story of all syscalls
+      syscall_history[num].times_called++;
+      syscall_history[num].elapsed_time+=(finish_time-start_time);
+      release(&tickslock);
+
+    }
+   
+    
+
+
+    
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
     p->trapframe->a0 = -1;
   }
-}
+  
+    
+   
+
+}
\ No newline at end of file
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..572adf3 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,7 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace  22
+#define SYS_history 23
+//for bonus
+#define SYS_exit2 24
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..53d0d37 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -6,6 +6,7 @@
 #include "spinlock.h"
 #include "proc.h"
 
+
 uint64
 sys_exit(void)
 {
@@ -89,3 +90,31 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+uint64
+sys_trace(void)
+{
+  
+ 
+  int num;
+  argint(0,&num);
+  myproc()->trace_num=num;
+  return 0;
+}
+uint64
+sys_history(void)
+{
+  
+  uint64 st; // user pointer to struct stat
+int syscall_num=-1;
+//read the system call number
+argint(0,&syscall_num);
+  argaddr(1, &st);
+     history(st,syscall_num);
+  return 0;
+}
+uint64
+sys_exit2(void)
+{
+    exit_helper();
+  return 0;
+}
\ No newline at end of file
diff --git a/user/exit2.c b/user/exit2.c
new file mode 100644
index 0000000..6f5b717
--- /dev/null
+++ b/user/exit2.c
@@ -0,0 +1,13 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+
+
+int
+main(int argc, char *argv[])
+{
+    exit2();
+    return 0;
+}
\ No newline at end of file
diff --git a/user/history.c b/user/history.c
new file mode 100644
index 0000000..85d87a8
--- /dev/null
+++ b/user/history.c
@@ -0,0 +1,51 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/struct_stat.h"
+
+
+int
+main(int argc, char *argv[])
+{
+  
+ int No_of_syscalls=24;
+
+  if((argc>2)){
+    fprintf(2, "error\n", argv[0]);
+    exit(1);
+  }
+  if(argc==2){
+    //this means history for a particular system call
+    //this does nothing.Just to initialize the ptr pointer as uninitialized pointer give error
+  struct syscall_stat obj;
+  struct syscall_stat *ptr=&obj;
+  //argv[1] contains the system call number
+  history(atoi(argv[1]),ptr);
+  printf("%d:\t",atoi(argv[1]));
+  printf("syscall:  %s,",ptr->syscall_name);
+  printf(" #:  = %d, ",ptr->times_called);
+  printf(" time: %d \n",ptr->elapsed_time);
+  }
+  if(argc==1)
+  {
+      struct syscall_stat obj;
+  struct syscall_stat *ptr=&obj;
+    //a system call for showing the history of all the system calls
+    for(int i=1;i<=No_of_syscalls;i++)
+    {
+      
+  history(i,ptr);
+printf("%d:\t",i);
+  printf("syscall:  %s,",ptr->syscall_name);
+  printf(" #:  = %d, ",ptr->times_called);
+  printf(" time: %d \n",ptr->elapsed_time);
+
+    }
+
+  }
+
+  //history()
+  exit(0);
+}
+
diff --git a/user/trace.c b/user/trace.c
new file mode 100644
index 0000000..1e322ce
--- /dev/null
+++ b/user/trace.c
@@ -0,0 +1,27 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+  char *nargv[MAXARG];
+
+  if(argc < 3 || (argv[1][0] < '0' || argv[1][0] > '9')){
+    fprintf(2, "Usage: %s sys_call_num command\n", argv[0]);
+    exit(1);
+  }
+
+  if (trace(atoi(argv[1])) < 0) {
+    fprintf(2, "%s: trace failed\n", argv[0]);
+    exit(1);
+  }
+  
+  for(i = 2; i < argc && i < MAXARG; i++){
+    nargv[i-2] = argv[i];
+  }
+  exec(nargv[0], nargv);
+  exit(0);
+}
diff --git a/user/user.h b/user/user.h
index 4d398d5..215f78e 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,5 +1,5 @@
 struct stat;
-
+struct syscall_stat;
 // system calls
 int fork(void);
 int exit(int) __attribute__((noreturn));
@@ -22,6 +22,10 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int trace(int);
+int history(int sys_call_num,struct syscall_stat*);
+//for the bonus..
+int exit2(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..ed7f596 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,6 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
+entry("history");
+entry("exit2");
